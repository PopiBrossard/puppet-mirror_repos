#!/bin/bash
# Author: Bhanu Prasad G (gangurubhanu@gmail.com)

# This file is managed by puppet

exec 3>&1
exec 4>&2

#default variables
: ${UPDATE:=True}
: ${VERBOSE:=False}
: ${GPG_CHECK:=True}
: ${COMPS:=False}
: ${METADATA:=False}
: ${DELETE:=False}
: ${NEWEST:=False}

#define variables
REPOS_DIR=<%= scope.lookupvar('mirror_repos::repos_dir') %>
CONFIG_DIR=<%= scope.lookupvar('mirror_repos::config_dir') %>
CREATEREPO_CMD=`which createrepo`
REPOSYNC_CMD="$(which reposync) -q"
CACHEDIR='/var/tmp'

show_help(){

cat << EOF 1>&2

USAGE: $0 [-huv] [-o OS] [-r REPO1,REPO2] -- Script to mirror repositories to local repos

where:
      -h | --help             show help on how to run this script
      -o | --os               update this OS repos only (default all)
      -r | --repo             repo name to update (all by default)
      -v | --verbose          show output/error to stdout/stderr (redirect to /dev/null by default)
      -u | --update           repos update only (enabled by default)
      -g | --no-gpgcheck      remove gpg check (enabled by default)
      -m | --downloadcomps    also download comps.xml (disabled by default)
      -M | --download-metadata    also download comps.xml (disabled by default)
      -d | --delete           delete local packages no longer present in repository (disabled by default)
      -n | --newest-only      Download only newest packages per-repo (disabled by default)
      -c | --cachedir         set path to cache dir for createrepo command

By default, running this script sync all available repositories for all OS.
For syncing only a single/few repos give reponames with -r option seperated by commas.

EOF

}

#make options based on help
OPTIONS=$(getopt -o "vuhgmdnMo:r:c:" -l "verbose,update,help,no-gpgcheck,downloadcomps,delete,newest-only,download-metadata,os:,repo:,cachedir:" -n 'update-repos' -- "$@")
[ $? -eq 0 ] && eval set -- "$OPTIONS"


main(){
    option=''
    if [ ${GPG_CHECK} == 'True' ]; then
      option+=' -g'
    fi
    if [ ${COMPS} == 'True' ]; then
      option+=' -m'
    fi
    if [ ${METADATA} == 'True' ]; then
      option+=' --download-metadata'
    fi
    if [ ${DELETE} == 'True' ]; then
      option+=' -d'
    fi
    if [ ${NEWEST} == 'True' ]; then
      option+=' -n'
    fi
    if [ ${UPDATE} == 'True' ]; then
        [ ! -f $CONFIG_DIR/$OS_NAME.repo ] && echo "$OS_NAME configuration not available at $CONFIG_DIR" && exit 1
        for REPO in ${REPOS_OS[@]}; do
            if ! egrep -s "\[$REPO\]" $CONFIG_DIR/$OS_NAME.repo >& /dev/null ; then
                echo "$REPO configuration not available" && exit 1
            fi
            echo "updating $REPO for $OS_NAME now"
            yum clean all >& /dev/null
            # don't update on first execution
            if [ -d $REPOS_DIR/$OS/$REPO ]; then
              update_repo=''
            else
              update_repo='--update'
            fi
            mkdir -p $REPOS_DIR/$OS/
            #sync remote repos to local directories
            $REPOSYNC_CMD -q -l -c $CONFIG_DIR/$OS_NAME.repo --repoid=$REPO --download_path=$REPOS_DIR/$OS/ $option
            #create yum repository from local synced directories
            createrepo_option=''
            if [ -f  $REPOS_DIR/$OS/$REPO/comps.xml ]; then
              createrepo_option="-g $REPOS_DIR/$OS/$REPO/comps.xml"
            fi
            $CREATEREPO_CMD --workers=$(nproc --all) $update_repo --cachedir $CACHEDIR $createrepo_option $REPOS_DIR/$OS/$REPO
            if [ "$REPO" = 'updates' ]; then
              # manually generate updateinfo.xml file, containing metadata about security updates
              version=$(cat $CONFIG_DIR/$OS_NAME.repo | grep -o -P '([0-9](?=/updates))')
              generate_updateinfo -s all -t all -r $version $CACHEDIR/errata.latest.xml -d $CACHEDIR
              modifyrepo $CACHEDIR/updateinfo-$version/updateinfo.xml $REPOS_DIR/$OS/$REPO/repodata
              # old updateinfo files aren't automatically cleaned up, manually doing it
              for old_updateinfo in $(ls -rt $REPOS_DIR/$OS/$REPO/repodata/ | grep update | head -n -1); do echo "deleting outdated $old_updateinfo" && rm -f "$REPOS_DIR/$OS/$REPO/repodata/$old_updateinfo"; done
            elif [ "$REPO" = 'epel' ]; then
              # add updateinfo.xml to mirror
              bunzip2 -c $(ls -S $REPOS_DIR/$OS/$REPO/*updateinfo*bz2 | tail -n 1) > $REPOS_DIR/$OS/$REPO/updateinfo.xml
              modifyrepo $REPOS_DIR/$OS/$REPO/updateinfo.xml $REPOS_DIR/$OS/$REPO/repodata
              rm -f $REPOS_DIR/$OS/$REPO/*.xml.gz $REPOS_DIR/$OS/$REPO/*.xml.bz2
              for extension_to_remove in updateinfo primary filelists comps other; do
                for file in $(ls -rt $REPOS_DIR/$OS/$REPO/repodata/*$extension_to_remove* | head -n -1); do rm -f $file; done
              done
            elif [ "$REPO" = 'AppStream' ]; then
              # import modules.yaml
              baseurl=$(cat $CONFIG_DIR/$OS_NAME.repo | awk '/\[AppStream\]/,/^$/' | grep baseurl | cut -d'=' -f2 | head -n 1)
              # get most recent modules.yaml file, because current reposync version isn't downloading it
              module_name="$(wget -q -O - $baseurl/repodata/  | egrep -o -m 1 '[a-z0-9]+-modules.yaml.[a-z]+' | sort -u)"
              wget -q -O - $baseurl/repodata/$module_name | gunzip > $REPOS_DIR/$OS/$REPO/modules.yaml
              modifyrepo --mdtype=modules $REPOS_DIR/$OS/$REPO/modules.yaml $REPOS_DIR/$OS/$REPO/repodata
              # cleanup
              rm -f $REPOS_DIR/$OS/$REPO/modules.yaml $REPOS_DIR/$OS/$REPO/*-modules.yaml.gz
            <% if scope.lookupvar('mirror_repos::pxeboot') == true %>
            elif [ "$REPO" = 'os' ]; then
              # allow pxeboot using local mirror
              echo 'download needed files for pxeboot'
              baseurl=$(cat $CONFIG_DIR/$OS_NAME.repo | awk '/\[os\]/,/^$/' | grep baseurl | cut -d'=' -f2 | head -n 1)
              mkdir -p $REPOS_DIR/$OS/$REPO/images/pxeboot
              mkdir -p $REPOS_DIR/$OS/$REPO/LiveOS
              wget -q -N $baseurl/images/boot.iso -P $REPOS_DIR/$OS/$REPO/images/
              wget -q -N $baseurl/images/efiboot.img -P $REPOS_DIR/$OS/$REPO/images/
              wget -q -N $baseurl/images/pxeboot/initrd.img -P $REPOS_DIR/$OS/$REPO/images/pxeboot/
              wget -q -N $baseurl/images/pxeboot/vmlinuz -P $REPOS_DIR/$OS/$REPO/images/pxeboot/
              wget -q -N $baseurl/LiveOS/squashfs.img -P $REPOS_DIR/$OS/$REPO/LiveOS/
            elif [ "$REPO" = 'BaseOS' ]; then
              # allow pxeboot using local mirror
              echo 'download needed files for pxeboot'
              baseurl=$(cat $CONFIG_DIR/$OS_NAME.repo | awk '/\[BaseOS\]/,/^$/' | grep baseurl | cut -d'=' -f2 | head -n 1)
              mkdir -p $REPOS_DIR/$OS/$REPO/images/pxeboot
              wget -q -N $baseurl/images/boot.iso -P $REPOS_DIR/$OS/$REPO/images/
              wget -q -N $baseurl/images/efiboot.img -P $REPOS_DIR/$OS/$REPO/images/
              wget -q -N $baseurl/images/install.img -P $REPOS_DIR/$OS/$REPO/images/
              wget -q -N $baseurl/images/pxeboot/initrd.img -P $REPOS_DIR/$OS/$REPO/images/pxeboot/
              wget -q -N $baseurl/images/pxeboot/vmlinuz -P $REPOS_DIR/$OS/$REPO/images/pxeboot/
              # manually generate updateinfo.xml file, containing metadata about security updates
              version=$(cat $CONFIG_DIR/$OS_NAME.repo | grep -o -P '([0-9](?=/BaseOS))')
              generate_updateinfo -s all -t all -r $version $CACHEDIR/errata.latest.xml -d $CACHEDIR
              modifyrepo $CACHEDIR/updateinfo-$version/updateinfo.xml $REPOS_DIR/$OS/$REPO/repodata
              # old updateinfo files aren't automatically cleaned up, manually doing it
              for old_updateinfo in $(ls -rt $REPOS_DIR/$OS/$REPO/repodata/ | grep update | head -n -1); do echo "deleting outdated $old_updateinfo" && rm -f "$REPOS_DIR/$OS/$REPO/repodata/$old_updateinfo"; done
            <% end %>
            fi
        done
        #reset REPOS for next OS
        REPOS_OS=''
    fi
}

while true; do
    case "$1" in
          -h | --help)
                  show_help
                  exit 1
                  ;;
          -o | --os)
                  OSES=$2
                  shift 2
                  ;;
          -r | --repo)
                  REPOS=$2
                  shift 2
                  ;;
          -v | --verbose)
                  CREATEREPO_CMD+=' -v'
                  VERBOSE='True'
                  REPOSYNC_CMD=`which reposync`
                  shift
                  ;;
          -u | --update)
                  shift
                  ;;
          -g | --no-gpgcheck)
                  GPGCHECK=False
                  shift
                  ;;
          -m | --downloadcomps)
                  COMPS=True
                  shift
                  ;;
          -M | --download-metadata)
                  METADATA=True
                  shift
                  ;;
          -d | --delete)
                  DELETE=True
                  shift
                  ;;
          -n | --newest-only)
                  NEWEST=True
                  shift
                  ;;
          -c | --cachedir)
                  CACHEDIR="$2"
                  shift 2
                  ;;
          --)
                  shift
                  break
                  ;;
          *)
                  echo "Option not found"
                  show_help
                  exit 1
                  ;;
    esac
done

#if no os, is given get all OS defined in puppet hiera
[ $OSES ] || OSES=( <%= @oses.join(" ") %> )


# download only once errata file
wget -q -N -P $CACHEDIR http://cefs.steve-meier.de/errata.latest.xml
for OS in ${OSES[@]}; do
    #if repos are specified, make them an array
    ##if repos are not specified, get from configs
    <% @oses.each do | os | -%>
    [ $REPOS ] && REPOS_<%= os.split('-').join('_').split('/').join('_') %>=( $(echo "$REPOS" |sed 's/,/ /g') )
    [ ${REPOS_<%= os.split('-').join('_').split('/').join('_') %>} ] || REPOS_<%= os.split('-').join('_').split('/').join('_') %>=( <%= scope.lookupvar('mirror_repos::repos')[os].keys.join(" ") %> )
    <% end -%>
    OS=$(echo $OS | sed 's/-/_/g')
    # for variable name, remove all extra '/'
    OS_NAME=$(echo $OS | sed 's/\//_/g')
    #now define a new array, because substrings won't perform well in for loop
    REPOS_OS=$(eval echo \${REPOS_${OS_NAME}[*]})
    if [ ${VERBOSE} == 'False' ]; then
        exec 2>/dev/null 1>/dev/null
    fi
    #call main function always
    main
done
